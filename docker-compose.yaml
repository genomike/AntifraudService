services:
  postgres:
    image: postgres:14
    environment:
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_DB=antifraud_db
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.2
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - app_network

  kafka:
    image: confluentinc/cp-kafka:7.3.2
    depends_on:
      - zookeeper
    restart: always
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_ZOOKEEPER_CONNECTION_TIMEOUT_MS: 60000
    networks:
      - app_network
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server localhost:29092 --list"]
      interval: 10s
      timeout: 20s
      retries: 5
      start_period: 10s

  api:
    build:
      context: .
      dockerfile: src/AntifraudService.Api/Dockerfile
    ports:
      - "58809:8080"
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_started
    environment:
      - ConnectionStrings__DefaultConnection=Server=postgres;Port=5432;Database=antifraud_db;User Id=postgres;Password=postgres;
      - Kafka__BootstrapServers=kafka:29092
      - Kafka__Topic=transaction-events
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:8080
    networks:
      - app_network

  init-kafka:
    image: confluentinc/cp-kafka:7.3.2
    depends_on:
      kafka:
        condition: service_healthy
    command: >
      bash -c "
        echo -e 'Creando topic Kafka: transaction-events'
        kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic transaction-events --partitions 1 --replication-factor 1
      "
    networks:
      - app_network

  worker:
    build:
      context: .
      dockerfile: src/AntifraudService.Worker/Dockerfile
    depends_on:
      init-kafka:
        condition: service_completed_successfully
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
      api:
        condition: service_started
    environment:
      - ConnectionStrings__DefaultConnection=Server=postgres;Port=5432;Database=antifraud_db;User Id=postgres;Password=postgres;
      - Kafka__BootstrapServers=kafka:29092
      - Kafka__Topic=transaction-events
      - ApiSettings__BaseUrl=http://api:8080
      - DOTNET_ENVIRONMENT=Development
    networks:
      - app_network

volumes:
  postgres_data:

networks:
  app_network:
    driver: bridge