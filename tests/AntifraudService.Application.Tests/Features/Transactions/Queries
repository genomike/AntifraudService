// This file contains unit tests for the GetTransaction feature of the Anti-fraud service. 
// It ensures that the transaction retrieval logic works as expected.

using Xunit;
using Moq;
using AntifraudService.Application.Features.Transactions.Queries.GetTransaction;
using AntifraudService.Application.Common.Interfaces;
using AntifraudService.Domain.Entities;
using System.Threading;
using System.Threading.Tasks;

namespace AntifraudService.Application.Tests.Features.Transactions.Queries
{
    public class GetTransactionHandlerTests
    {
        private readonly Mock<ITransactionRepository> _transactionRepositoryMock;
        private readonly GetTransactionHandler _handler;

        public GetTransactionHandlerTests()
        {
            _transactionRepositoryMock = new Mock<ITransactionRepository>();
            _handler = new GetTransactionHandler(_transactionRepositoryMock.Object);
        }

        [Fact]
        public async Task Handle_ValidTransactionId_ReturnsTransactionDto()
        {
            // Arrange
            var transactionId = Guid.NewGuid();
            var transaction = new Transaction
            {
                Id = transactionId,
                SourceAccountId = Guid.NewGuid(),
                TargetAccountId = Guid.NewGuid(),
                TransferTypeId = 1,
                Value = new Money(100, "USD"),
                Status = TransactionStatus.Pending
            };

            _transactionRepositoryMock.Setup(repo => repo.GetTransactionByIdAsync(transactionId, It.IsAny<CancellationToken>()))
                .ReturnsAsync(transaction);

            var query = new GetTransactionQuery(transactionId);

            // Act
            var result = await _handler.Handle(query, CancellationToken.None);

            // Assert
            Assert.NotNull(result);
            Assert.Equal(transactionId, result.Id);
        }

        [Fact]
        public async Task Handle_InvalidTransactionId_ReturnsNull()
        {
            // Arrange
            var transactionId = Guid.NewGuid();
            _transactionRepositoryMock.Setup(repo => repo.GetTransactionByIdAsync(transactionId, It.IsAny<CancellationToken>()))
                .ReturnsAsync((Transaction)null);

            var query = new GetTransactionQuery(transactionId);

            // Act
            var result = await _handler.Handle(query, CancellationToken.None);

            // Assert
            Assert.Null(result);
        }
    }
}